#pragma checksum "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "388630a176d924aabc5b6fe3e73de73e46c5454c"
// <auto-generated/>
#pragma warning disable 1591
namespace blazor_client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using blazor_client;
    using blazor_client.Shared;
    using Blazor.Extensions;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/dicegame")]
    public class DiceGame : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
            builder.OpenElement(0, "form");
            builder.AddMarkupContent(1, "\n");
            builder.AddMarkupContent(2, "<h1>Wellcome To Dice Game</h1>        \n");
#line 5 "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor"
         if(!isConnect) {

#line default
#line hidden
            builder.AddContent(3, "            ");
            builder.OpenElement(4, "div");
            builder.AddAttribute(5, "class", "form-group row");
            builder.AddMarkupContent(6, "\n                ");
            builder.AddMarkupContent(7, "<label class=\"control-label\" for=\"userName\">User Name</label>\n                ");
            builder.OpenElement(8, "div");
            builder.AddAttribute(9, "class", "col-sm-10");
            builder.AddMarkupContent(10, "\n                    ");
            builder.OpenElement(11, "input");
            builder.AddAttribute(12, "type", "text");
            builder.AddAttribute(13, "id", "userName");
            builder.AddAttribute(14, "value", Microsoft.AspNetCore.Components.BindMethods.GetValue(userName));
            builder.AddAttribute(15, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => userName = __value, userName));
            builder.CloseElement();
            builder.AddMarkupContent(16, "\n                    ");
            builder.OpenElement(17, "input");
            builder.AddAttribute(18, "type", "button");
            builder.AddAttribute(19, "id", "addList");
            builder.AddAttribute(20, "value", "Connect");
            builder.AddAttribute(21, "class", "btn btn-primary");
            builder.AddAttribute(22, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, AddList));
            builder.CloseElement();
            builder.AddMarkupContent(23, "\n                ");
            builder.CloseElement();
            builder.AddMarkupContent(24, "  \n            ");
            builder.CloseElement();
            builder.AddMarkupContent(25, "\n");
#line 13 "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor"
        } 
        else
        {

#line default
#line hidden
            builder.AddContent(26, "            ");
            builder.OpenElement(27, "div");
            builder.AddAttribute(28, "class", "form-group row");
            builder.AddMarkupContent(29, "\n                ");
            builder.OpenElement(30, "label");
            builder.AddAttribute(31, "class", "control-label");
            builder.AddAttribute(32, "for", "playDice");
            builder.OpenElement(33, "h3");
            builder.OpenElement(34, "font");
            builder.AddAttribute(35, "color", "red");
            builder.AddContent(36, userName);
            builder.CloseElement();
            builder.CloseElement();
            builder.CloseElement();
            builder.AddMarkupContent(37, "\n                ");
            builder.OpenElement(38, "div");
            builder.AddAttribute(39, "class", "col-sm-10");
            builder.AddMarkupContent(40, "                \n");
#line 19 "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor"
                   if(!isplayAgain)
                  {

#line default
#line hidden
            builder.AddContent(41, "                     ");
            builder.OpenElement(42, "input");
            builder.AddAttribute(43, "type", "button");
            builder.AddAttribute(44, "id", "playDice");
            builder.AddAttribute(45, "value", "Play Dice");
            builder.AddAttribute(46, "class", "btn btn-primary");
            builder.AddAttribute(47, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, PlayDice));
            builder.CloseElement();
            builder.AddMarkupContent(48, "   \n");
#line 22 "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor"
                  }
                  else
                  {

#line default
#line hidden
            builder.AddContent(49, "                     ");
            builder.OpenElement(50, "input");
            builder.AddAttribute(51, "type", "button");
            builder.AddAttribute(52, "id", "playDice");
            builder.AddAttribute(53, "value", "Play Again");
            builder.AddAttribute(54, "class", "btn btn-primary");
            builder.AddAttribute(55, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, PlayAgain));
            builder.CloseElement();
            builder.AddMarkupContent(56, "  \n");
#line 26 "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor"
                  }   

#line default
#line hidden
#line 27 "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor"
                      if(diceOne!=0)
                     {

#line default
#line hidden
            builder.AddContent(57, "                       ");
            builder.OpenElement(58, "img");
            builder.AddAttribute(59, "src", "/Images/" + (diceOne) + ".png");
            builder.AddAttribute(60, "asp-append-version", "true");
            builder.AddAttribute(61, "width", "50px");
            builder.CloseElement();
            builder.AddMarkupContent(62, " \n                       ");
            builder.OpenElement(63, "img");
            builder.AddAttribute(64, "src", "/Images/" + (diceTwo) + ".png");
            builder.AddAttribute(65, "asp-append-version", "true");
            builder.AddAttribute(66, "width", "50px");
            builder.CloseElement();
            builder.AddMarkupContent(67, " \n                       ");
            builder.OpenElement(68, "label");
            builder.AddAttribute(69, "class", "control-label");
            builder.OpenElement(70, "h3");
            builder.AddContent(71, "Score : ");
            builder.AddContent(72, diceOne+diceTwo);
            builder.CloseElement();
            builder.CloseElement();
            builder.AddMarkupContent(73, "\n");
#line 32 "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor"
                    }                 

#line default
#line hidden
            builder.AddContent(74, "                ");
            builder.CloseElement();
            builder.AddMarkupContent(75, "      \n            ");
            builder.CloseElement();
            builder.AddMarkupContent(76, "\n");
#line 35 "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor"
        }

#line default
#line hidden
#line 36 "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor"
         if(isConnectPlayer2)
        {

#line default
#line hidden
            builder.AddContent(77, "            ");
            builder.OpenElement(78, "div");
            builder.AddAttribute(79, "class", "form-group row");
            builder.AddMarkupContent(80, "\n                ");
            builder.OpenElement(81, "label");
            builder.AddAttribute(82, "class", "control-label");
            builder.OpenElement(83, "h3");
            builder.OpenElement(84, "font");
            builder.AddAttribute(85, "color", "red");
            builder.AddContent(86, userName2);
            builder.CloseElement();
            builder.CloseElement();
            builder.CloseElement();
            builder.AddMarkupContent(87, "\n                ");
            builder.OpenElement(88, "div");
            builder.AddAttribute(89, "class", "col-sm-10");
            builder.AddMarkupContent(90, "\n");
#line 41 "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor"
                     if(diceThree!=0)
                    {

#line default
#line hidden
            builder.AddContent(91, "                        ");
            builder.OpenElement(92, "img");
            builder.AddAttribute(93, "src", "/Images/" + (diceThree) + ".png");
            builder.AddAttribute(94, "asp-append-version", "true");
            builder.AddAttribute(95, "width", "50px");
            builder.CloseElement();
            builder.AddMarkupContent(96, " \n                        ");
            builder.OpenElement(97, "img");
            builder.AddAttribute(98, "src", "/Images/" + (diceFour) + ".png");
            builder.AddAttribute(99, "asp-append-version", "true");
            builder.AddAttribute(100, "width", "50px");
            builder.CloseElement();
            builder.AddMarkupContent(101, " \n                        ");
            builder.OpenElement(102, "label");
            builder.AddAttribute(103, "class", "control-label");
            builder.OpenElement(104, "h3");
            builder.AddContent(105, "Score : ");
            builder.AddContent(106, diceThree+diceFour);
            builder.CloseElement();
            builder.CloseElement();
            builder.AddMarkupContent(107, "\n");
#line 46 "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor"
                    }                                     

#line default
#line hidden
            builder.AddContent(108, "                ");
            builder.CloseElement();
            builder.AddMarkupContent(109, "      \n            ");
            builder.CloseElement();
            builder.AddMarkupContent(110, "\n");
#line 49 "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor"
        }

#line default
#line hidden
            builder.CloseElement();
        }
        #pragma warning restore 1998
#line 51 "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor"
            
    string connectionID;
    string userName;
    HubConnection connection;
    bool isConnect=false;

    bool isplayAgain=false;

    string userName2;
    string connectionID2;
    bool isConnectPlayer2=false;
    int diceThree=0;
    int diceFour=0;

   [Inject]
   private HubConnectionBuilder _hubConnectionBuilder { get; set; }

   

#line default
#line hidden
#line 69 "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor"

    protected override async Task OnInitAsync()
    {
        connection = _hubConnectionBuilder
            .WithUrl("http://localhost:1923/dicehub",
            opt =>
            {
                opt.LogLevel = SignalRLogLevel.Trace; // Client log level
                opt.Transport = HttpTransportType.WebSockets; // Which transport you want to use for this connection
            })
            .Build();

        connection.On<string>("GetConnectionId", this.OnGetConnectionId);
        connection.On<string,string>("FetchUser", this.OnFetchUser);
        connection.On<string,int,int>("GetDice", this.OnGetDice);        
        await connection.StartAsync();
    }

    Task OnGetConnectionId(string _connectionID)
    {
        System.Console.WriteLine("ConnectionID:" + _connectionID);
        connectionID = _connectionID;
        return Task.CompletedTask;
    }

    async Task AddList()
    {
         bool result = await connection.InvokeAsync<bool>("AddList", userName, connectionID);     
         System.Console.WriteLine("User Add Result:" + result);   
         if(result){             
             isConnect=true;
         }
                  
    }

    async Task SenDice()
    {
         await connection.InvokeAsync("SenDice", connectionID2, userName, diceOne,diceTwo);   
         await CalculateResult();  
         System.Console.WriteLine("Dice Send");                              
    }

    Task OnFetchUser(string userName, string connectionID)
    {
       System.Console.WriteLine("Player2 Name:" + userName);
       System.Console.WriteLine("Player2 ConnectionID:" + connectionID);
       connectionID2 = connectionID;
       userName2 = userName;
       isConnectPlayer2=true;
       StateHasChanged();
       return Task.CompletedTask;
    }

    async Task OnGetDice(string userName, int _diceOne, int _diceTwo)
    {
        diceThree=_diceOne;
        diceFour=_diceTwo;
        
        if(diceOne!=0 && diceTwo!=0 && diceThree!=0 && diceFour!=0)
        {
            isplayAgain=true;
        }

        StateHasChanged();                
        
        await CalculateResult();
    }

    async Task CalculateResult(){       
        if(diceOne!=0 && diceTwo!=0 && diceThree!=0 && diceFour!=0)
        {
            if((diceOne+diceTwo)>(diceThree+diceFour))
            {
               System.Console.WriteLine("Winner:" + userName); 
               await ShowAlert("Kazanan :"+userName);              
            } 
            else
            {
                System.Console.WriteLine("Winner:" + userName2); 
                await ShowAlert("Kazanan :"+userName2);
            }           
        }
    }
    
    int diceOne=0;
    int diceTwo=0;
    async Task PlayDice()
    {
        System.Random rnd= new Random();
        diceOne=rnd.Next(1,7);
        System.Threading.Thread.Sleep(1000);
        diceTwo=rnd.Next(1,7);
        StateHasChanged();
        System.Console.WriteLine("Dice 1:" + diceOne);         
        System.Console.WriteLine("Dice 2:" + diceTwo);  

        if(diceOne!=0 && diceTwo!=0 && diceThree!=0 && diceFour!=0)
        {
            isplayAgain=true;            
        }

        await SenDice();       
    }

    void PlayAgain(){
        isplayAgain=false;
        diceOne=0;
        diceTwo=0;
        diceThree=0;
        diceFour=0;
        StateHasChanged();
    }

    private async Task ShowAlert(string message)
    {
         var result = await jsRuntime.InvokeAsync<object>("ShowAlert", message);        
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
    }
}
#pragma warning restore 1591
