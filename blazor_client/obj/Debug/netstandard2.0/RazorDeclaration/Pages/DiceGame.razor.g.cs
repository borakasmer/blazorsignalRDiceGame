#pragma checksum "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "388630a176d924aabc5b6fe3e73de73e46c5454c"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace blazor_client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using blazor_client;
    using blazor_client.Shared;
    using Blazor.Extensions;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/dicegame")]
    public class DiceGame : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 51 "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor"
            
    string connectionID;
    string userName;
    HubConnection connection;
    bool isConnect=false;

    bool isplayAgain=false;

    string userName2;
    string connectionID2;
    bool isConnectPlayer2=false;
    int diceThree=0;
    int diceFour=0;

   [Inject]
   private HubConnectionBuilder _hubConnectionBuilder { get; set; }

   

#line default
#line hidden
#line 69 "/Users/borakasmer/blazor/blazor_client/Pages/DiceGame.razor"

    protected override async Task OnInitAsync()
    {
        connection = _hubConnectionBuilder
            .WithUrl("http://localhost:1923/dicehub",
            opt =>
            {
                opt.LogLevel = SignalRLogLevel.Trace; // Client log level
                opt.Transport = HttpTransportType.WebSockets; // Which transport you want to use for this connection
            })
            .Build();

        connection.On<string>("GetConnectionId", this.OnGetConnectionId);
        connection.On<string,string>("FetchUser", this.OnFetchUser);
        connection.On<string,int,int>("GetDice", this.OnGetDice);        
        await connection.StartAsync();
    }

    Task OnGetConnectionId(string _connectionID)
    {
        System.Console.WriteLine("ConnectionID:" + _connectionID);
        connectionID = _connectionID;
        return Task.CompletedTask;
    }

    async Task AddList()
    {
         bool result = await connection.InvokeAsync<bool>("AddList", userName, connectionID);     
         System.Console.WriteLine("User Add Result:" + result);   
         if(result){             
             isConnect=true;
         }
                  
    }

    async Task SenDice()
    {
         await connection.InvokeAsync("SenDice", connectionID2, userName, diceOne,diceTwo);   
         await CalculateResult();  
         System.Console.WriteLine("Dice Send");                              
    }

    Task OnFetchUser(string userName, string connectionID)
    {
       System.Console.WriteLine("Player2 Name:" + userName);
       System.Console.WriteLine("Player2 ConnectionID:" + connectionID);
       connectionID2 = connectionID;
       userName2 = userName;
       isConnectPlayer2=true;
       StateHasChanged();
       return Task.CompletedTask;
    }

    async Task OnGetDice(string userName, int _diceOne, int _diceTwo)
    {
        diceThree=_diceOne;
        diceFour=_diceTwo;
        
        if(diceOne!=0 && diceTwo!=0 && diceThree!=0 && diceFour!=0)
        {
            isplayAgain=true;
        }

        StateHasChanged();                
        
        await CalculateResult();
    }

    async Task CalculateResult(){       
        if(diceOne!=0 && diceTwo!=0 && diceThree!=0 && diceFour!=0)
        {
            if((diceOne+diceTwo)>(diceThree+diceFour))
            {
               System.Console.WriteLine("Winner:" + userName); 
               await ShowAlert("Kazanan :"+userName);              
            } 
            else
            {
                System.Console.WriteLine("Winner:" + userName2); 
                await ShowAlert("Kazanan :"+userName2);
            }           
        }
    }
    
    int diceOne=0;
    int diceTwo=0;
    async Task PlayDice()
    {
        System.Random rnd= new Random();
        diceOne=rnd.Next(1,7);
        System.Threading.Thread.Sleep(1000);
        diceTwo=rnd.Next(1,7);
        StateHasChanged();
        System.Console.WriteLine("Dice 1:" + diceOne);         
        System.Console.WriteLine("Dice 2:" + diceTwo);  

        if(diceOne!=0 && diceTwo!=0 && diceThree!=0 && diceFour!=0)
        {
            isplayAgain=true;            
        }

        await SenDice();       
    }

    void PlayAgain(){
        isplayAgain=false;
        diceOne=0;
        diceTwo=0;
        diceThree=0;
        diceFour=0;
        StateHasChanged();
    }

    private async Task ShowAlert(string message)
    {
         var result = await jsRuntime.InvokeAsync<object>("ShowAlert", message);        
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
    }
}
#pragma warning restore 1591
